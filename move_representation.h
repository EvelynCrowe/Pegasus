#ifndef PEGASUS_STUFF_MOVE_REPRESENTATION_H
#define PEGASUS_STUFF_MOVE_REPRESENTATION_H

#include <stdlib.h>
#include <iostream>
#include <cstdint>

#include "board_object.h"

typedef uint32_t UL;
typedef uint32_t Move;

//---------- Position constants ---------//
// Corners of the board
#define ROOK_B_SHORT_CORNER 98 // h8
#define ROOK_B_LONG_CORNER 91 // a8
#define ROOK_W_SHORT_CORNER 28 // h1
#define ROOK_W_LONG_CORNER 21 // a1

// Castling constants
#define ROOK_B_SHORT_CASTLE_TO 96 // f8
#define ROOK_B_LONG_CASTLE_TO 94 // d8
#define ROOK_W_SHORT_CASTLE_TO 26 // f1
#define ROOK_W_LONG_CASTLE_TO 24 // d1

//FIXME: this is a awful and long namespace, any reccomendations for something shorter?
namespace MoveRepresentation {
    enum : unsigned char {NO_CASTLE, LONG_CASTLE, SHORT_CASTLE};

    // Array to store the ranges of bits each value takes up, index the UL long like an array (first bit from left is index 0)
    // As normal, range is [start, end) (not including end index)
    enum : unsigned char {startPosIndex /*7 bits*/, endPosIndex /*7 bits*/, 
    castleIndex /*2 bits*/, enPassantIndex /*4 bits*/, captureIndex /*3 bits*/,
    promoteIndex /*3 bits*/, pieceThatMovedIndex /*3 bits*/};
    constexpr const static unsigned short ranges[7][2] = {{32u-7u, 32u}, {32u-14u, 32u-7u}, 
    {32u-16u, 32u-14u}, {16u-4u, 16u}, {16u-7u, 16u-4u}, 
    {16u-10u, 16u-7u}, {16u-13u, 16u-10u}};

    // TODO: Maybe we could have promoted be just one bit, if piece represents what the piece is at the end of the move?
    // TODO: Maybe we should store a bit for whose turn it is? This could be used to color the pieces, rather than having to re-read them from the board.
    /**
     * Creates a new move given the parameters.
     * Required parameters: 
     *   <start/end>Position: 120-index of the moving piece (castling is done by a king move)
     *   piece: uncolored piece that is making move
     * Optional parameters:
     *   capturedPiece: the uncolored piece at the endPosition before move is made. Note that if we do 4 bits, we can include the color too.
     *   castle: takes castle enum
     *   enPassant: TODO: ???? what are those 4 bits used for??
     *   promotedPiece: uncolored piece a pawn is promoting to; EMPTY if none or N/A
     */
    Move encodeMove(short startPosition, short endPosition, short piece, 
    short capturedPiece=utility::uncolor(board::EMPTY), short castle=NO_CASTLE, short enPassant=0u, short promotedPiece=utility::uncolor(board::EMPTY)) {
        Move code = 0;
        UL numBits = sizeof(UL) * 8;

        // Get result by bit-shifting the inputs into place then or'ing the results
        code |= (startPosition << (numBits - ranges[startPosIndex][1]));
        code |= (endPosition << (numBits - ranges[endPosIndex][1]));
        code |= (castle << (numBits - ranges[castleIndex][1]));
        code |= (enPassant << (numBits - ranges[enPassantIndex][1]));
        code |= (capturedPiece << (numBits - ranges[captureIndex][1]));
        code |= (promotedPiece << (numBits - ranges[promoteIndex][1]));
        code |= (piece << (numBits - ranges[pieceThatMovedIndex][1]));

        return code;
    }

    // Generic decoder function, decodes "target" from "toDecode"
    // Meant to use MoveRepresentation::"enum" as "target"
    UL decodeMove(Move code, unsigned short target){
        UL numBits = sizeof(UL) * 8;
        // Use bit operations to extract "len" bits starting from right-most bit "right"
        // Bit mask generated by shifting 1 to the left, then subtracting 1, then shifting: ex: 0000 0001 -> 0001 0000 -> 0000 1111 -> 0111 1000
        return ((1u << (ranges[target][1] - ranges[target][0])) - 1u) & (code >> (numBits - ranges[target][1]));
    }

    /** 
     * Returns true if it was able to apply move to the board, 
     * Assumes move is valid.
     */
    bool applyMove(board::Board *board, Move move) {
        // store endpos since we will use it multiple times, and it does not make sense to repeatedly recalculate it
        UL endPos = decodeMove(move, endPosIndex);
        UL startPos = decodeMove(move, startPosIndex);

        /*----- set END of move ------*/
        // assumes promoteIndex stores piece type being promoted to, EMPTY/INVALID otherwise
        if (decodeMove(move, promoteIndex) == utility::uncolor(board::INVALID)) {
            // normal move
            board->chessboard[endPos] = board->chessboard[startPos];
        } else {
            // promotion
            if (utility::isWhite(board->chessboard[startPos])) // TODO: eww can we just store whose turn it is?
                board->chessboard[endPos] = utility::recolor(decodeMove(move, promoteIndex));
            else
                board->chessboard[endPos] = utility::toBlack(utility::recolor(decodeMove(move, promoteIndex)));
        }

        /*----- en passant ------*/
        // assumes 0 means not en passant, anything else means en passant
        if (decodeMove(move, enPassantIndex)) {
            // assumes 12x10 board, where 10 in a row. 
            // row of start and column of end
            board->chessboard[startPos/10*10 + endPos%10] = board::EMPTY;
        }

        /*----- castling ------*/
        // set rook for short castle
        if (decodeMove(move, castleIndex) == SHORT_CASTLE) {
            // is this on black or white's side?
            if (endPos > 32) { // Regardless if we use 120 or 64 position numbering, 32 will be between ranks [2,7] inclusive. Could be any other number that fits this criteria.
                board->chessboard[ROOK_B_SHORT_CORNER] = board::EMPTY;
                board->chessboard[ROOK_B_SHORT_CASTLE_TO] = board::BR;
            } else {
                board->chessboard[ROOK_W_SHORT_CORNER] = board::EMPTY;
                board->chessboard[ROOK_W_SHORT_CASTLE_TO] = board::WR;
            }
        // set rook for long castle
        } else if (decodeMove(move, castleIndex) == LONG_CASTLE) {
            // is this on black or white's side?
            if (endPos > 32) { // Regardless if we use 120 or 64 position numbering, 32 will be between ranks [2,7] inclusive. Could be any other number that fits this criteria.
                board->chessboard[ROOK_B_LONG_CORNER] = board::EMPTY;
                board->chessboard[ROOK_B_LONG_CASTLE_TO] = board::BR;
            } else {
                board->chessboard[ROOK_W_LONG_CORNER] = board::EMPTY;
                board->chessboard[ROOK_W_LONG_CASTLE_TO] = board::WR;
            }
        }

        /*----- set START of move ------*/
        // move from will always leave an empty space (except chess960 castling, which is handled in castling section)
        board->chessboard[startPos] = board::EMPTY;
        return true;
    }

    bool undoMove(board::Board *board, Move move) {
        // store endpos since we will use it multiple times, and it does not make sense to repeatedly recalculate it
        UL endPos = decodeMove(move, endPosIndex);
        UL startPos = decodeMove(move, startPosIndex);

        /*----- reset START of move ------*/
        // assumes promoteIndex stores piece type being promoted to, EMPTY/INVALID otherwise
        if (decodeMove(move, promoteIndex) == utility::uncolor(board::INVALID)) {
            board->chessboard[startPos] = board->chessboard[endPos];
        } else {
            // promotion can only come from a pawn of its color
            board->chessboard[startPos] = utility::isWhite(board->chessboard[endPos]) ? board::WP : board::BP;
        }
        // from this point on, we can be sure the piece that made the move is the one at start position

        /*----- set END of move ------*/
        // replace the piece that was captured,
        board->chessboard[endPos] = utility::recolor(decodeMove(move, captureIndex));
        // and recolor it if needed
        if (utility::isBlack(board->chessboard[startPos])) utility::toBlack(board->chessboard[endPos]);

        /*----- en passant ------*/
        // assumes 0 means not en passant, anything else means en passant
        if (decodeMove(move, enPassantIndex)) {
            // assumes 12x10 board, where 10 in a row. 
            // row of start and column of end
            board->chessboard[startPos/10*10 + endPos%10] = utility::isWhite(board->chessboard[startPos]) ? board::WP : board::BP;
        }

        /*----- castling ------*/
        // set rook for short castle
        if (decodeMove(move, castleIndex) == SHORT_CASTLE) {
            // is this on black or white's side?
            if (endPos > 32) { // Regardless if we use 120 or 64 position numbering, 32 will be between ranks [2,7] inclusive. Could be any other number that fits this criteria.
                board->chessboard[ROOK_B_SHORT_CORNER] = board::BR;
                board->chessboard[ROOK_B_SHORT_CASTLE_TO] = board::EMPTY;
            } else {
                board->chessboard[ROOK_W_SHORT_CORNER] = board::WR;
                board->chessboard[ROOK_W_SHORT_CASTLE_TO] = board::EMPTY;
            }
        // set rook for long castle
        } else if (decodeMove(move, castleIndex) == LONG_CASTLE) {
            // is this on black or white's side?
            if (endPos > 32) { // Regardless if we use 120 or 64 position numbering, 32 will be between ranks [2,7] inclusive. Could be any other number that fits this criteria.
                board->chessboard[ROOK_B_LONG_CORNER] = board::BR;
                board->chessboard[ROOK_B_LONG_CASTLE_TO] = board::EMPTY;
            } else {
                board->chessboard[ROOK_W_LONG_CORNER] = board::WR;
                board->chessboard[ROOK_W_LONG_CASTLE_TO] = board::EMPTY;
            }
        }
        return true;
    }

//    // Decodes a string representation longo an array of its parts
//    static UL* decodeMove(UL toDecode){
//        UL numBits = sizeof(UL) * 8;
////        auto *results = (UL *) calloc(sizeof(ranges)/ sizeof(ranges[0]),(numBits) * 1000);
////        auto *results = new UL[sizeof(ranges)/ sizeof(ranges[0])];
////        UL* results = NULL;
////        results = new UL[sizeof(ranges)/ sizeof(ranges[0])];
//        UL results[sizeof(ranges)/ sizeof(ranges[0])];
////        std::cout << sizeof(ranges) << "\n";
////        std::cout << sizeof(ranges[0]) << "\n";
//        std::cout << sizeof(ranges)/ sizeof(ranges[0]) << "\n";
//        std::cout << sizeof(results) << "\n";
//        std::cout << sizeof(results)/ sizeof(results[0]) << "\n";
//
//        // Use bit operations to extract "len" bits starting from right-most bit "right"
//        // Bit mask generated by shifting 1 to the left, then subtracting 1, then shifting: ex: 0000 0001 -> 0001 0000 -> 0000 1111 -> 0111 1000
//        results[startPos] = decodeStartPos(toDecode);
//        results[endPos] = decodeEndPos(toDecode);
//        results[castle] = decodeCastle(toDecode);
//        results[enPassant] = decodeEnPassant(toDecode);
//        results[capture] = decodeCapturedPiece(toDecode);
//        results[promote] = decodePromotedPiece(toDecode);
//
//        return results;
//    }
};

#endif //PEGASUS_STUFF_MOVE_REPRESENTATION_H
